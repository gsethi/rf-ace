#summary Manual pages.

= Description =

RF-ACE is an efficient C++ implementation of a robust machine learning algorithm for uncovering multivariate associations from large and diverse data sets. RF-ACE natively handles numerical and categorical data with missing values, and potentially large quantities of noninformative features are handled gracefully utilizing artificial contrast features, bootstrapping, and p-value estimation.

= Installation =

Download the latest stable release from the [http://code.google.com/p/rf-ace/downloads/list download page], or checkout the latest development version (to directory rf-ace/) by calling

{{{
svn checkout http://rf-ace.googlecode.com/svn/trunk/ rf-ace
}}}

In Linux, you can compile the program by calling 

{{{
make
}}}
or
{{{
make rf_ace
}}}

Check compiled binaries at the [http://code.google.com/p/rf-ace/downloads/list download page]. (A compiler script for Visual Studio will soon be provided.)

= Input file support =

RF-ACE currently supports two file formats, Annotated Feature Matrix (AFM) and Attribute-Relation File Format (ARFF). AFM is a matrix representation of the data, rows (resp. columns) being feature vectors and columns (resp. rows) being samples. For further information, check file input specifications [http://foo.bar here].     

= Usage =

Call 
{{{
bin/rf_ace --help
}}}
or 
{{{
bin/rf_ace -h
}}}
to bring up help:
{{{
REQUIRED ARGUMENTS:
 -I / --input        input feature file (AFM or ARFF)
 -O / --output       output association file

OPTIONAL ARGUMENTS:
 -i / --targetidx    target index, ref. to feature matrix (default 0)
 -n / --ntrees       number of trees per RF (default nsamples/nrealsamples)
 -m / --mtry         number of randomly drawn features per node split (default sqrt(nfeatures))
 -s / --nodesize     minimum number of train samples per node, affects tree depth (default max{5,nsamples/20})
 -p / --nperms       number of Random Forests (default 50)
 -t / --pthreshold   p-value threshold below which associations are listed (default 0.1)
}}} 


RF-ACE can simply be run by calling

{{{
bin/rf_ace --input featurematrix.afm --targetidx 0 --output associations.tsv 
}}}
or with the short-hand notation equivalently as
{{{
bin/rf_ace -I featurematrix.afm -i 0 -O associations.tsv 
}}}