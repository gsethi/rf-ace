#summary Manual pages.

*The manual pages have been written on the basis of RF-ACE verson 1.0*

= Description =

RF-ACE is an efficient C++ implementation of a robust machine learning algorithm for uncovering multivariate associations from large and diverse data sets. RF-ACE natively handles numerical and categorical data with missing values, and potentially large quantities of noninformative features are handled gracefully utilizing artificial contrast features, bootstrapping, and p-value estimation.

= Installation =

Download the latest stable release from the [http://code.google.com/p/rf-ace/downloads/list download page], or checkout the latest development version (to directory rf-ace/) by typing
{{{
svn checkout http://rf-ace.googlecode.com/svn/trunk/ rf-ace
}}}

Compiler makefiles for Linux (`Makefile`) and Visual Studio for Windows (`make.bat`) are provided in the package. In Linux, you can compile the program by typing 
{{{
make
}}}

In Windows and using Visual Studio, first open up the Visual Studio terminal and execute either `make_win32.bat` or `make_win64.bat` by typing
{{{
make_win32
}}}
or
{{{
make_win64
}}}
Simple as that! You should now have the following binaries:

*`rf-ace-filter`*
  * performs feature selection with an ensemble Random Forest approach
  * extracts p-values for associations
  * can be used for dimensionality reduction in subsequent prediction
*`rf-ace-build-predictor`* 
  * builds either a GBT (default) or RF predictor based on input data
  * stores the predictor forest as a forest file (.sf)
*`rf-ace-predict`* 
  * makes predictions with novel data, given a predictor (.sf)

If you feel lucky, check for compiled binaries at the [http://code.google.com/p/rf-ace/downloads/list download page]. 

= Supported data formats =
RF-ACE currently supports two file formats, Annotated Feature Matrix (AFM) and Attribute-Relation File Format (ARFF).

* Annotated Feature Matrix (AFM) *

Annotated Feature Matrix represents the data as a tab-delimited table, where both columns and rows contain headers describing the samples and features. Based on the headers, the AFM reader is able to discern the right orientation (features as rows or columns in the matrix) of the matrix. Namely AFM feature headers must encode whether the feature is (`N`)umerical, (`C`)ategorical, or (`B`)inary, followed by colon and the actual name of the feature as follows:

 * `B:is_alive`
 * `N:age`
 * `C:tumor_grage` 

In fact any string, even including colons, spaces, and other special characters, encodes a valid feature name as long as it starts with the preamble `N:`/`C:`/`B:`. Thus, the following is a valid feature header:

 * `N:GEXP:TP53:chr17:123:456`

Sample headers are not constrained, except that they must not contain preambles `N:`/`C:`/`B:`, being reserved for the feature headers. 

Missing values can be any upper/lowercase combination of

 * NA
 * NAN
 * ?

And binary/categorical features may have string literal entries. Here is an example of a valid AFM:
{{{
	S1	S2	S3	S4	S5	S6	S7	S8	S9	S10
N:F1	NA	8.5	3.4	7.2	5	6	7	11	9	NA
N:F2	2	3	4	5	6	NA	NA	9	NA	10
B:F3	NA	NA	NA	NA	DEAD	DEAD	DEAD	ALIVE	ALIVE	ALIVE
N:F4	10	9.9	8	7	6	5	4	3	2.4	1
C:F5	3	3	3	4	4	5	3	2	2	2
N:F6	9	8	7	9	8	7	3	2	1.0	99.23
}}}



* Attribute-Relation File Format (ARFF) *

When the feature matrix is as ARFF, the aforementioned constraints for feature headers do no longer apply, since the ARFF itself has an internal format for specifying feature type.

Read more about [http://www.cs.waikato.ac.nz/~ml/weka/arff.html ARFF specification].      


= Identify important features from data using RF-ACE = 
RF-ACE performs feature selection for a given target and feature matrix using the `rf-ace-filter` sub-program as follows:
{{{
  bin/rf-ace-filter -I data.arff -i target -O associations.tsv
}}}   
The parameter `-I / --traindata` is used to specify the feature matrix, `-i / --target` to specify the target, and `-O / --associations` to specify the output file for associations. The format of the association list is as follows (one entry per row):
{{{
TARGET    PREDICTOR    LOG10(P-VALUE)    IMPORTANCE    CORRELATION    NSAMPLES
}}} 
where `NSAMPLES` is the number of non-missing samples shared by the target and predictor. There will be one such entry (row) per each identified, statistically significant association, sorted by p-value to increasing order. 

== Giving target feature as an integer ==
It is possible to replace the name of the feature as the argument for `-i / --target` with a `0`-base integer pointing to the proper row/column of the data file. So valid arguments for `-i` are `0,1,...,N-1`, where `N-1` is the number of features in the input data file. The following command would take the first feature in the file as the target feature and regard others as candidate predictors:
{{{
bin/rf-ace-filter -I data.arff -i 0 -O associations.tsv
}}}

== Tuning parameters of the statistical test ==
By default `rf-ace-filter` assigns the p-value threshold to `0.05`, but which can be manually tuned by the `-t / --pthreshold` parameter like so:
{{{
bin/rf-ace-filter -I data.arff -i target -O associations.tsv -t 0.001
}}}
It is thus possible to get the complete association list, sorted with respect to p-value, by setting the p-value threshold to `1.0` like so
{{{
bin/rf-ace-filter -I data.arff -i target -O associations.tsv -t 1.0
}}}  

== `rf-ace-build-predictor` ==

== `rf-ace-predict` ==